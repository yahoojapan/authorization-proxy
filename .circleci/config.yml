alias:
  default: &default
    docker:
      - image: cimg/go:1.19.3
        environment:
          GO111MODULE: "on"
          REPO_NAME: "yahoojapan"
          DOCKERHUB_REPO_NAME: "yahoojapan"
          IMAGE_NAME: "authorization-proxy"
          GITHUB_API: "https://api.github.com/"
          DOCKER_USER: "tatyano"
  setup_remote_docker: &setup_remote_docker
    version: 20.10.18

version: 2
jobs:
  test:
    <<: *default
    steps:
      - checkout
      - restore_cache:
          key: gosum-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: preparation
          command: |
            go mod vendor
      - run:
          name: run tests
          command: |
            rm -rf example
            go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
            go tool cover -html=coverage.out -o coverage.html
            # bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: ./coverage.html
      - save_cache:
          key: gosum-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - ./vendor
  build:
    <<: *default
    steps:
      - setup_remote_docker: *setup_remote_docker
      - attach_workspace:
          at: .
      - checkout
      - run:
          name: check docker version
          command: |
            docker version
      - run:
          name: docker image build
          command: |
            if [ ! -z "$CIRCLE_TAG" ]; then
              echo '$CIRCLE_TAG exists, use: '"$CIRCLE_TAG"
              TAG="$CIRCLE_TAG"
            elif [ -f ./.tag ]; then
              TAG=`cat ./.tag`
            fi
            if [ ! -z "$TAG" ]; then
              docker build --build-arg APP_VERSION=${TAG} -t ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest .
            else
              # env DOCKER_BUILDKIT=1 docker build -t ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest .
              docker build -t ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest .
            fi
      - run:
          name: check build version
          command: |
            docker run --rm --name ${IMAGE_NAME} ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest --version
      - run:
          name: save image
          command: |
            docker image save ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest > ./docker-image.tar
      - persist_to_workspace:
          root: .
          paths:
            - .
  publish_nightly:
    <<: *default
    steps:
      - setup_remote_docker: *setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: load image from tar
          command: |
            docker load -i ./docker-image.tar
      - run:
          name: tag to latest
          command: |
            docker tag ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:nightly
      - run:
          name: docker login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - run:
          name: push image to registry
          command: |
            docker push ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:nightly
  publish:
    <<: *default
    steps:
      - setup_remote_docker: *setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: load image from tar
          command: |
            docker load -i ./docker-image.tar
      - run:
          name: tag to latest
          command: |
            docker tag ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:latest ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}:$CIRCLE_TAG
      - run:
          name: docker login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - run:
          name: push image to registry
          command: |
            docker push ${DOCKERHUB_REPO_NAME}/${IMAGE_NAME}
  versioning:
    <<: *default
    steps:
      - checkout
      - run:
          name: check
          command: |
            mkdir -p "$HOME/.ssh/" && echo -e 'Host github.com\n\tStrictHostKeyChecking no\n' > ~/.ssh/config
            LAST_COMMIT="$(git log -1 --pretty=%B)"
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              # If PR, use PR title instead of last commit msg
              PR_NUM="${CIRCLE_PULL_REQUEST##*/}"
              LAST_COMMIT="$(curl -s "${GITHUB_API}repos/${REPO_NAME}/${IMAGE_NAME}/pulls/${PR_NUM}" | jq -r .title)"
            fi
            printf 'LAST_COMMIT: %s\n' "${LAST_COMMIT}"
            touch ./.tag
            VERSION="$(git tag -l --sort=-creatordate 'v*' | head -n 1)"
            # Diff to prevent pipeline re-runs.
            if [ -n "$(git diff "$VERSION")" ]; then
              VERSION=${VERSION:-'v0.0.0'}
              MAJOR="${VERSION%%.*}"; MAJOR="${MAJOR#v}"; VERSION="${VERSION#*.}"
              MINOR="${VERSION%%.*}"; VERSION="${VERSION#*.}"
              PATCH="${VERSION%%.*}"; VERSION="${VERSION#*.}"

              case "$LAST_COMMIT" in
              '[patch]'* | '[PATCH]'*)
                PATCH=$((PATCH+1))
                echo "v$MAJOR.$MINOR.$PATCH" > ./.tag
                ;;
              '[minor]'* | '[MINOR]'*)
                MINOR=$((MINOR+1))
                echo "v$MAJOR.$MINOR.0" > ./.tag
                ;;
              '[major]'* | '[MAJOR]'*)
                MAJOR=$((MAJOR+1))
                echo "v$MAJOR.0.0" > ./.tag
                ;;
              # Don't release (nightly images only)
              '[skip]'* | '[SKIP]'*)
                echo "Skip release..."
                ;;
              # Don't want to run CI.
              '[skip ci]'* | '[ci skip]'*)
                echo "Will skip CI..."
                ;;
              *)
                echo "Required prefixes: [major]/[minor]/[patch]/[skip]/[skip ci]"
                exit 1
                ;;
              esac
            else
              if [ -n "$VERSION" ]; then
                echo "No diff, skip tagging..."
              else
                echo "No diff, No tag. Tag it as \"v0.0.0\"."
                echo "v0.0.0" > ./.tag
              fi
            fi
      - run:
          name: echo version
          command: |
            TAG_FILE='./.tag' \
            && if [[ -s ${TAG_FILE} ]]; then echo "TAG: `cat "${TAG_FILE}"`"; else echo "TAG: (${TAG_FILE} is empty)"; fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  push:
    <<: *default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: push tag and check PR body
          command: |
            mkdir -p $HOME/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            TAG=`cat ./.tag`
            if [ ! -z "$TAG" ]; then
              echo $TAG
              git tag $TAG
              git push https://${GITHUB_ACCESS_TOKEN}:x-oauth-basic@github.com/${REPO_NAME}/${IMAGE_NAME} --tags
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  gh_release:
    <<: *default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: release
          command: |
            mkdir -p $HOME/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            TAG=`cat ./.tag`
            if [ ! -z "$TAG" ]; then
              echo "Create release: ${TAG}"
              curl -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" \
                   -X POST \
                   -d "{\"tag_name\": \"${TAG}\"}" \
                   ${GITHUB_API}repos/${REPO_NAME}/${IMAGE_NAME}/releases
            fi

workflows:
  version: 2
  build:
    jobs:
      - test
      - versioning
      - build:
          requires:
            - versioning
      - publish_nightly:
          requires:
            - test
            - build
          filters:
            branches:
              only:
                - master
      - push:
          filters:
            branches:
              only:
                - master
          requires:
            - test
            - versioning
      - gh_release:
          requires:
            - push
  release:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+\.[0-9]+\.[0-9]+/
      - publish:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+\.[0-9]+\.[0-9]+/
